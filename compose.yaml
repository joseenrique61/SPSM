networks:
  app-net:
    driver: bridge

x-kong-config:
  &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: postgres
  KONG_PG_USER: ${POSTGRES_USER}
  KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}

volumes:
  postgres_data:
  rabbitmq_data:
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

services:
  postgres:
    image: postgres:17
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-net
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${POSTGRES_USER}"
        ]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    networks:
      - app-net
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "8001:8001/tcp"
      - "8444:8444/tcp"
      - "8002:8002/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./src/KongGateway/config/:/opt/kong
    security_opt:
      - no-new-privileges

  rabbitmq:
    # Last RabbitMQ version
    image: rabbitmq:4.1.1-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      # We need to run start.sh first before run docker compose file 
      - ./src/RabbitMQ/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./src/RabbitMQ/definitions.json:/etc/rabbitmq/definitions.json
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-net
    restart: on-failure:5
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s 

  data_seeder:
    image: data_seeder
    profiles: ["seeding"]
    depends_on:
      - postgres
      - search_service
    environment:
      - ConnectionStrings__InventoryConnection=Host=postgres;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${INVENTORY_DB}
      - ConnectionStrings__SearchConnection=Host=postgres;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${SEARCH_DB}
    build:
      context: src/DataSeeder
      dockerfile: DataSeeder/Dockerfile
    networks:
      - app-net
    restart: on-failure:5

  search_service:
    image: search_service
    depends_on:
      postgres:
        condition: service_healthy
      kong:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${SEARCH_DB}
    build:
      context: src/SearchService
      dockerfile: SearchService/Dockerfile
    networks:
      - app-net
    restart: on-failure:5

  user_service:
    image: user_service
    depends_on:
      postgres:
        condition: service_healthy
      kong:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${USERS_DB}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
    build:
      context: src/UserService
      dockerfile: UserService/Dockerfile
    networks:
      - app-net
    restart: on-failure:5
